package floodcontrol

import (
	"context"
	"testing"
	"time"
)

func TestFloodControl_Check_NotPassed(t *testing.T) {
	fc := NewFloodControl(10, 5) // N=10, K=5
	ctx := context.Background()

	// Первый вызов проходит
	ok, err := fc.Check(ctx, 1)
	if err != nil {
		t.Fatalf("ожидалось, что ошибка будет nil, но получили: %v", err)
	}
	if !ok {
		t.Error("ожидалось, что флуд-контроль пройден")
	}
	t.Log("Флуд-контроль пройден") 

	// Делаем 5 вызовов, чтобы превысить K
	for i := 0; i < 5; i++ {
		_, err := fc.Check(ctx, 1)
		if err != nil {
			t.Fatalf("ожидалось, что ошибка будет nil, но получили: %v", err)
		}
	}

	// Проверяем, что флуд-контроль не пройден после 5 вызовов
	ok, err = fc.Check(ctx, 1)
	if err != nil {
		t.Fatalf("ожидалось, что ошибка будет nil, но получили: %v", err)
	}
	if ok {
		t.Error("ожидалось, что флуд-контроль не пройден")
	}
	t.Log("Флуд-контроль не пройден")

	// Ждем 10 секунд, чтобы сбросить счетчик вызовов
	time.Sleep(10 * time.Second)

	// Делаем еще один вызов, чтобы проверить, что флуд-контроль снова пройден
	ok, err = fc.Check(ctx, 1)
	if err != nil {
		t.Fatalf("ожидалось, что ошибка будет nil, но получили: %v", err)
	}
	if !ok {
		t.Error("ожидалось, что флуд-контроль пройден")
	}
	t.Log("Флуд-контроль пройден после сброса счетчика") 

	// Делаем еще 5 вызовов, чтобы снова превысить K
	for i := 0; i < 5; i++ {
		_, err := fc.Check(ctx, 1)
		if err != nil {
			t.Fatalf("ожидалось, что ошибка будет nil, но получили: %v", err)
		}
	}

	// Проверяем, что флуд-контроль не пройден после 5 вызовов после сброса счетчика
	ok, err = fc.Check(ctx, 1)
	if err != nil {
		t.Fatalf("ожидалось, что ошибка будет nil, но получили: %v", err)
	}
	if ok {
		t.Error("ожидалось, что флуд-контроль не пройден")
	}
	t.Log("Флуд-контроль не пройден после повторного превышения лимита") 
}
